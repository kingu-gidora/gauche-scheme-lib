(define-module jphil.ansi
  (export ansi-parse))

(define (ansi-parse str)  
  (define result "")
  (define (parse-aux p)    
    (define c (read-char p))
    (cond ((eof-object? c) result)
	  ((equal? c #\@)
	   (when (equal? (peek-char p) #\()
		 (ansi-cmd p))
	   (parse-aux p))
	  (else 
	   (set! result (string-append result (string c)))
	   (parse-aux p))))
  (define (ansi-cmd p)
    (let1 cmd (read p)
	  (case (car cmd)
	    ((bg) (set! result (format #f "~a~a[~am" result #\escape (case (cadr cmd)
								       ((black) 40)
								       ((red) 41)
								       ((green) 42)
								       ((yellow) 43)
								       ((blue) 44)
								       ((magenta purple) 45)
								       ((cyan) 46)
								       ((white) 47)
								       (else 49)))))
	    ((fg) (set! result (format #f "~a~a[~am" result #\escape (case (cadr cmd)
								       ((black) 30)
								       ((red) 31)
								       ((green) 32)
								       ((yellow) 33)
								       ((blue) 34)
								       ((magenta purple) 35)
								       ((cyan) 36)
								       ((white) 37)
								       (else 39)))))
	    ((reset (set! result (format #f "~a[0m" #\escape)))))))
  (call-with-input-string str (lambda(p)(parse-aux p))))
(define (ansi-parse str)  
  (define result "")
  (define (parse-aux p)    
    (define c (read-char p))
    (cond ((eof-object? c) result)
	  ((equal? c #\@)
	   (when (equal? (peek-char p) #\()
		 (ansi-cmd p))
	   (parse-aux p))
	  (else 
	   (set! result (string-append result (string c)))
	   (parse-aux p))))
  (define (ansi-cmd p)
    (let1 cmd (read p)
	  (case (car cmd)
	    ((bg) (set! result (format #f "~a~a[~am" result #\escape (case (cadr cmd)
								       ((black) 40)
								       ((red) 41)
								       ((green) 42)
								       ((yellow) 43)
								       ((blue) 44)
								       ((magenta purple) 45)
								       ((cyan) 46)
								       ((white) 47)
								       (else 49)))))
	    ((fg) (set! result (format #f "~a~a[~am" result #\escape (case (cadr cmd)
								       ((black) 30)
								       ((red) 31)
								       ((green) 32)
								       ((yellow) 33)
								       ((blue) 34)
								       ((magenta purple) 35)
								       ((cyan) 36)
								       ((white) 37)
								       (else 39)))))
	    ((reset) (set! result (format #f "~a[0m" #\escape))))))
  (call-with-input-string str (lambda(p)(parse-aux p))))
